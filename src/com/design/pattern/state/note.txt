State - Fun with finite state machines

Motivation:
            - Consider an ordinary telephone, then what you can do with it depends on the current state of the phone/line
                    * If it's ringing or you want to make a call, you can pick it up
                    * phone must be off the hook to talk/make a call (available line)
                    * If you try calling someone, and it's busy, you put the headset down
            - Changes in state can be explicit or in response to event (observer pattern)

State - A pattern in which the object's behavior is determined by its state. An object transitions from one state to
            another (something needs to trigger a transition).

        A formalized construct which manages state and transitions is called a state machine.


Summary:
        - Given sufficient complexity, it pays to formally define possible states and events/triggers
        - what you can define
            * state entry/exit behaviors
            * Action when a particular event causes a transition
            * Guard conditions enabling/disabling a transition
            * Default action when no transitions are found for an event
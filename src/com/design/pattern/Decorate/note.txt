Decorate - Adding behavior without altering the class itself

Motivation to use:
    - want to augment an object with additional functionality
                   so you're already have classes defined and you want additional functionality in those classes but
                   you don't want to go into those classes and rewrite them/change their existing code b/c that would
                   break the open closed principle.
    - Do not want to rewrite/alter existing code (OCP - Open Closed Principle)
    - want to keep new functionality separate (SRP - Single Responsibility Principle)
    - need to be able to interact with existing structures
                    you do want the decorate the object to be compatible with an API that uses the old object

    - You have two options:
                * Inherit from required object if possible if the class is not final, you will get the behaviors of
                    that class and then you can build on top of that
                * Build a Decorator, which simply references the decorated object(s)
                     typically it aggregates it and it adds new functionality on the side

Decorator: Facilitates the addition of behaviors to individual objects w/o inheriting from them.


______________________
Summary:
        - a decorator keeps the reference to the decorated object
        - May or may not forward calls
                IDE can generate Delegated Members
        - Exists in a static variation
                * X<Y<Foo>> (// unpleasant constructor args)
                * Inability to inherit from type parameters
